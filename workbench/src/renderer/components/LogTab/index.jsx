import React from 'react';
import PropTypes from 'prop-types';

import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Container from 'react-bootstrap/Container';

import { Virtuoso } from 'react-virtuoso';

import { ipcMainChannels } from '../../../main/ipcMainChannels';

const { ipcRenderer } = window.Workbench.electron;
const logger = window.Workbench.getLogger('LogTab');

class LogDisplay extends React.Component {
  constructor(props) {
    super(props);
  }

  render() {
    /* Render log text as raw html to facilitate styling the plain text.
    This is dangerous, but made safer because the text is generated by
    natcap.invest, not by user-input, and because all text is passed
    through sanitize-html. */
    return (
      <Col
        className={`text-break`}
        id="log-display"
      >
        <Virtuoso
          followOutput
          style={{ height: '100%' }}
          totalCount={this.props.logdata.length}
          itemContent={
            (index) => <div>{this.props.logdata[index]}</div>
          }
        />
      </Col>
    );
  }
}

LogDisplay.propTypes = {
  logdata: PropTypes.Array,
};

export default class LogTab extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      logdata: [],
    };
  }

  componentDidMount() {
    const { logfile, executeClicked, tabID } = this.props;
    // This channel is replied to by the invest process stdout listener
    // And by the logfile reader.
    ipcRenderer.on(`invest-stdout-${tabID}`, (data) => {
      // let { logdata } = this.state;
      // logdata += data;
      // this.setState({ logdata: logdata });
      this.setState((state) => ({
        logdata: [...state.logdata, data]
      }));
    });
    if (!executeClicked && logfile) {
      ipcRenderer.send(
        ipcMainChannels.INVEST_READ_LOG,
        logfile,
        tabID,
      );
    }
  }

  componentDidUpdate(prevProps) {
    // If we're re-running a model after loading a recent run,
    // we should clear out the logdata when the new run is launched.
    if (this.props.executeClicked && !prevProps.executeClicked) {
      this.setState({ logdata: [] });
    }
  }

  componentWillUnmount() {
    ipcRenderer.removeAllListeners(`invest-stdout-${this.props.tabID}`);
  }

  render() {
    return (
      <Container fluid>
        <Row>
          <LogDisplay logdata={this.state.logdata} />
        </Row>
      </Container>
    );
  }
}

LogTab.propTypes = {
  logfile: PropTypes.string,
  executeClicked: PropTypes.bool.isRequired,
  tabID: PropTypes.string.isRequired,
};
