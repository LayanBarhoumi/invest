name: Build InVEST App Binaries

on:
    push:
    pull_request:

defaults:
  run:
    shell: bash -l {0}

env:
  # build: dependency of make install
  # nomkl: make sure numpy w/out mkl
  # requests: dependency of convert-requirements-to-conda-yml.py
  DEFAULT_DEPENDENCIES: build nomkl requests
  PYTHON_VERSION: 3.9
  WINDOWS_PIP_CACHE: ~\AppData\Local\pip\Cache
  MACOS_PIP_CACHE: ~/Library/Caches/pip
  CONDA_CACHE: ~/conda_pkgs_dir  # setup-miniconda sets same cache dir on windows and mac

jobs:
    check-syntax-errors:
        name: Check for syntax errors
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2

            - name: Set up python ${{ env.PYTHON_VERSION }}
              uses: actions/setup-python@v1
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Set up environment
              run: pip install flake8

            - name: Lint with flake8
              run: |
                # stop the build if there are Python syntax errors or undefined names
                python -m flake8 src --count --select=E9,F63,F7,F82 --show-source --statistics
                # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
                python -m flake8 src --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    build-windows-binaries:
        name: Build windows binaries
        needs: check-syntax-errors
        runs-on: windows-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # fetch complete history

            - name: Fetch git tags
              run: git fetch origin +refs/tags/*:refs/tags/*

            - name: Restore pip cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.WINDOWS_PIP_CACHE }}
                  key: pip-windows-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}-exe

            - name: Restore conda cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.CONDA_CACHE }}
                  key: conda-windows-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}-exe

            - name: Restore chocolatey cache
              uses: actions/cache@v2
              with:
                  path: ~\AppData\Local\Temp
                  key: chocolatey-windows-exe

            - name: Setup conda environment
              uses: conda-incubator/setup-miniconda@v2
              with:
                  activate-environment: winbin-env
                  auto-update-conda: true
                  python-version: ${{ env.PYTHON_VERSION }}
                  channels: conda-forge

            - name: Install python dependencies
              run: |
                  conda install ${{ env.DEFAULT_DEPENDENCIES }} gdal
                  make install

            - name: Install build dependencies
              shell: powershell
              run: |
                  # Appveyor build scripts expects PYTHON to point to the dir containing python.
                  $env:PYTHON = python -c "import sys, os; print(os.path.dirname(sys.executable))"
                  ./ci/windows-ci-binary-install.ps1

            - name: Build userguide, binaries, installer
              run: |
                  # This builds the users guide, binaries, and installer
                  make windows_installer

            - name: Authenticate GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/auth@v0
              with:
                credentials_json: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/setup-gcloud@v0

            - name: Sign binaries
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              env:
                CERT_FILE: Stanford-natcap-code-signing-cert-expires-2024-01-26.p12
                CERT_PASS: ${{ secrets.WINDOWS_CODESIGN_CERT_PASS }}
              run: |
                # figure out the path to signtool.exe (it keeps changing with SDK updates)
                SIGNTOOL_PATH=$(find 'C:\\Program Files (x86)\\Windows Kits\\10' -type f -name 'signtool.exe*' | head -n 1)
                INSTALLER_BINARY=$(find "$(pwd)/dist" -type f -name 'InVEST_*.exe' | head -n 1)

                # setup-gcloud adds 'gsutil' to PATH
                make BIN_TO_SIGN="$INSTALLER_BINARY" SIGNTOOL="$SIGNTOOL_PATH" codesign_windows

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              run: |
                  # setup-gcloud adds 'gsutil' to PATH
                  make GSUTIL="gsutil" deploy

            - name: Upload installer artifact
              if: always()
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-windows-installer
                  path: dist/*.exe

            - name: Upload user's guide artifact
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-user-guide
                  path: dist/InVEST_*_userguide.zip

            - name: Upload workspace on failure
              if: ${{ failure() }}
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-failed-windows-workspace
                  path: ${{ github.workspace }}

    build-mac-binaries:
        name: Build mac binaries
        needs: check-syntax-errors
        runs-on: macos-10.15
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # fetch complete history

            - name: Fetch git tags
              run: git fetch origin +refs/tags/*:refs/tags/*

            - name: Install homebrew dependencies
              run: |
                  brew update
                  brew install pandoc

            - name: Restore pip cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.WINDOWS_PIP_CACHE }}
                  key: pip-mac-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}-dmg

            - name: Restore conda cache
              uses: actions/cache@v2
              with:
                  path: ${{ env.CONDA_CACHE }}
                  key: conda-mac-py${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements*.txt') }}-dmg

            - name: Setup conda environment
              uses: conda-incubator/setup-miniconda@v2
              with:
                  activate-environment: macbin-env
                  auto-update-conda: true
                  python-version: ${{ env.PYTHON_VERSION }}
                  channels: conda-forge

            - name: Build conda env with python dependencies
              run: |
                  conda install ${{ env.DEFAULT_DEPENDENCIES }} gdal
                  make install

            - name: Build binaries
              run: make mac_dmg

            - name: Authenticate GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/auth@v0
              with:
                credentials_json: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              # We only want to upload artifacts to a release object in a release.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/setup-gcloud@v0

            - name: Sign DMG
              if: github.event_name != 'pull_request'
              env:
                CERT_FILE: 2025-01-16-Expiry-AppStore-App.p12
                CERT_PASS: ${{ secrets.MACOS_CODESIGN_CERT_PASS }}
              run: make codesign_mac

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              run: make deploy

            - name: Upload binaries artifact
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-mac-binaries
                  path: dist/InVEST-*-mac.zip

            - name: Upload DMG artifact
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-dmg
                  path: dist/InVEST*.dmg

            - name: Tar the workspace to preserve permissions
              if: ${{ failure() }}
              run: tar -cvf InVEST-failed-mac-workspace.tar ${{ github.workspace }}

            - name: Upload workspace on failure
              if: ${{ failure() }}
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-failed-mac-workspace
                  path: InVEST-failed-mac-workspace.tar

    build-sampledata:
        name: Build sampledata archives
        needs: check-syntax-errors
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v2
              with:
                  fetch-depth: 0  # Fetch complete history
            - run: git fetch origin +refs/tags/*:refs/tags/*

            - uses: actions/setup-python@v1
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - run: make sampledata sampledata_single

            - name: Authenticate GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/auth@v0
              with:
                credentials_json: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

            - name: Set up GCP
              # Secrets not available in PR so don't use GCP.
              if: github.event_name != 'pull_request'
              uses: google-github-actions/setup-gcloud@v0

            - name: Deploy artifacts to GCS
              # Secrets not available in PR so don't use GCP.
              # We only want to upload artifacts to a release object in a release.
              if: github.event_name != 'pull_request'
              run: make deploy

            - name: Upload sample data artifact
              uses: actions/upload-artifact@v2
              with:
                  name: InVEST-sample-data
                  path: dist/*.zip
