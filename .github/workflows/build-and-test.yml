name: Run Tests, Build Python Distributions

on: [push, pull_request]

defaults:
  run:
    shell: bash -l {0}

env:
  # build: dependency of make install
  # nomkl: make sure numpy w/out mkl
  DEFAULT_DEPENDENCIES: build nomkl
  PYTHON_VERSION: 3.9
  CI_REQUIREMENTS_FILE: ci_requirements.txt

jobs:
  # This job will check for obvious syntax errors.
  # The other jobs in this file depend on this one and won't show up in the
  # jobs list on actions until this one completes successfully.
  # Best to run in linux ... windows won't honor nonzero exit statuses
  # by default.
  check-syntax-errors:
    name: Check for syntax errors
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/check_for_syntax_errors
        with:
          python-version: ${{ env.PYTHON_VERSION }}

  run-model-tests:
    name: Run model tests
    runs-on: ${{ matrix.os }}
    needs: check-syntax-errors
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [windows-latest, macos-latest]
        include:
          - python-version: 3.7
            numpy: "numpy=1.15"  # fuzzy assertion in conda is single '='
            gdal: "gdal==3.1.2"
          - python-version: 3.8
            numpy: "numpy=1.16"
            gdal: "gdal==3.2.0"
          - python-version: 3.9
            numpy: "numpy=1.20"
            gdal: "gdal==3.3.1"
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch complete history for accurate versioning

      # NOTE: It takes twice as long to save the sample data cache
      # as it does to do a fresh clone (almost 5 minutes vs. 2.5 minutes)
      # Test data is way, way faster by contrast (on the order of a few
      # seconds to archive).
      - name: Restore git-LFS test data cache
        uses: actions/cache@v2
        with:
          path: data/invest-test-data
          key: git-lfs-testdata-${{ hashfiles('Makefile') }}

      - id: condacache
        uses: ./.github/actions/setup_env
        with:
          cache-id: py${{ matrix.python-version }}-${{ matrix.os }}-model-tests
          requirements-files: |
            ${{ env.CI_REQUIREMENTS_FILE }}
            requirements.txt
            requirements-dev.txt
            requirements-gui.txt
          requirements: python=${{ matrix.python-version }} ${{ env.DEFAULT_DEPENDENCIES }} ${{ matrix.numpy }} ${{ matrix.gdal }} twine



      - name: Install dependencies
        if: steps.condacache.outputs.cache-hit != 'true'
        run: |
          echo python=${{ matrix.python-version }} \
            ${{ env.DEFAULT_DEPENDENCIES }} ${{ matrix.numpy }} \
            ${{ matrix.gdal }} twine | tr " " "\n" > ${{ env.CI_REQUIREMENTS_FILE }}
          python ./scripts/convert-requirements-to-conda-yml.py \
            ${{ env.CI_REQUIREMENTS_FILE }} requirements.txt requirements-dev.txt \
            requirements-gui.txt > requirements-all.yml
          conda env update --file requirements-all.yml

      - name: Build and install wheel
        run: |
          python -m build --wheel
          python -m twine check dist/*
          pip install $(find dist -name "natcap.invest*.whl")

      - name: Conda Environment Listing
        run: |
          conda list
          conda list --export > conda-env.txt

      - name: Download Conda Env Artifact
        continue-on-error: true
        # Using 'dawidd6' since 'download-artifact' GH action doesn't
        # support downloading artifacts from prior workflow runs
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build-and-test.yml
          # Get frozen conda env artifact from last successful workflow
          workflow_conclusion: success
          name: Conda Env for ${{ matrix.os }} ${{ matrix.python-version }}
          path: ./conda-env-artifact

      - name: Compare Conda Environments
        continue-on-error: true
        run: diff conda-env.txt conda-env-artifact/conda-env.txt

      - name: Run model tests
        run: make test

      - uses: actions/upload-artifact@v2
        with:
          name: Wheel for ${{ matrix.os }} ${{ matrix.python-version }}
          path: dist

      - uses: actions/upload-artifact@v2
        continue-on-error: true
        with:
          name: Conda Env for ${{ matrix.os }} ${{ matrix.python-version }}
          path: conda-env.txt

        # Secrets not available in PR so don't use GCP.
      - if: github.event_name != 'pull_request'
        uses: ./.github/actions/setup_gcp_and_deploy

  test-source-distribution:
    name: Check sdist
    runs-on: ${{ matrix.os }}
    needs: check-syntax-errors
    strategy:
      matrix:
        python-version: [3.7, 3.8, 3.9]
        os: [windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v2

      - uses: ./.github/actions/setup_env
        with:
          cache-id: py${{ matrix.python-version }}-${{ matrix.os }}-test-source-dist
        id: condacache

      - name: Install dependencies
        if: steps.condacache.outputs.cache-hit != 'true'
        run: |
          echo python=${{ matrix.python-version }} \
            ${{ env.DEFAULT_DEPENDENCIES }} setuptools_scm twine | tr " " "\n" > ${{ env.CI_REQUIREMENTS_FILE }}
          python ./scripts/convert-requirements-to-conda-yml.py \
            ${{ env.CI_REQUIREMENTS_FILE }} requirements.txt > requirements-all.yml
          conda env update --file requirements-all.yml

      - name: Build source distribution
        run: |
          # Because we're using PEP518 build requirements, the user's
          # computer is guaranteed to have cython available at build
          # time.  Thus, it is no longer necessary to distribute the
          # .cpp files in addition to the .pyx files.
          python -m build --sdist
          python -m twine check dist/*

      - name: Install from source distribution
        run : |
          # Prevent pip from thinking that CWD is a natcap.invest
          # installation. It's not.
          rm -r natcap.invest.egg-info

          # Install natcap.invest from the sdist in dist/
          pip install $(find dist -name "natcap.invest*")

          # Model tests should cover model functionality, we just want
          # to be sure that we can import `natcap.invest` here.
          # The point here is to make sure that we can build
          # natcap.invest from source and that it imports.
          python -c "from natcap.invest import *"

      - uses: actions/upload-artifact@v2
        with:
          name: Source distribution
          path: dist

        # Secrets not available in PR so don't use GCP.
        # Only upload sdist in one of the matrix cases so we don't
        # overwrite artifacts or have duplicates (mac/windows sdists have
        # different extensions)
      - if: github.event_name != 'pull_request' && matrix.os == 'macos-latest' && matrix.python-version == '${{ env.PYTHON_VERSION }}'
        uses: ./.github/actions/setup_gcp_and_deploy

  validate-resources:
    name: Validate Sampledata & User Guide
    runs-on: windows-latest
    needs: check-syntax-errors
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch complete history for accurate versioning

      - uses: ./.github/actions/setup_env
        with:
          cache-id: validate-resources
        id: condacache

      - name: Install dependencies
        if: steps.condacache.outputs.cache-hit != 'true'
        run: |
          echo python=${{ env.python-version }} ${{ env.DEFAULT_DEPENDENCIES }} \
            pytest setuptools_scm | tr " " "\n" > ${{ env.CI_REQUIREMENTS_FILE }}
          python ./scripts/convert-requirements-to-conda-yml.py \
            ${{ env.CI_REQUIREMENTS_FILE }} requirements.txt > requirements-all.yml
          conda env update --file requirements-all.yml
          make install

      - name: Validate sample data
        run: make validate_sampledata

      - name: Validate user guide links
        run: make validate_userguide_filenames

  run-ui-tests:
    name: Run UI Tests
    runs-on: windows-latest
    needs: check-syntax-errors
    strategy:
      fail-fast: False
      max-parallel: 4
      matrix:
        python-version: [3.7, 3.8, 3.9]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch complete history for accurate versioning


      - name: Restore git-LFS test data cache
        uses: actions/cache@v2
        with:
          path: data/invest-test-data
          key: git-lfs-testdata-${{ hashfiles('Makefile') }}

      - uses: ./.github/actions/setup_env
        with:
          cache-id: py${{ matrix.python-version }}-${{ matrix.os }}-ui-tests
        id: condacache

      - name: Install dependencies
        if: steps.condacache.outputs.cache-hit != 'true'
        run: |
          echo python=${{ matrix.python-version }} ${{ env.DEFAULT_DEPENDENCIES }} \
          | tr " " "\n" > ${{ env.CI_REQUIREMENTS_FILE }}
          python ./scripts/convert-requirements-to-conda-yml.py \
            ${{ env.CI_REQUIREMENTS_FILE }} requirements.txt requirements-dev.txt \
            requirements-gui.txt > requirements-all.yml
          conda env update --file requirements-all.yml
          python -m pip install .

      - name: Run UI tests
        timeout-minutes: 10  # tests usually take < 2 minutes, so 10 is generous.
        run: make test_ui

  run-workbench-tests:
    name: Run Workbench Tests
    runs-on: ${{ matrix.os }}
    needs: check-syntax-errors
    strategy:
      fail-fast: False
      max-parallel: 4
      matrix:
        os: [windows-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0 # Fetch complete history for accurate versioning

      - uses: ./.github/actions/setup_env
        with:
          cache-id: ${{ matrix.os }}-workbench-tests
          requirements:
        id: condacache

      - name: Install dependencies
        if: steps.condacache.outputs.cache-hit != 'true'
        run: |
          echo python=${{ env.python-version }} ${{ env.DEFAULT_DEPENDENCIES }} \
          | tr " " "\n" > ${{ env.CI_REQUIREMENTS_FILE }}
          python ./scripts/convert-requirements-to-conda-yml.py \
            ${{ env.CI_REQUIREMENTS_FILE }} requirements.txt requirements-dev.txt \
            requirements-gui.txt > requirements-all.yml
          conda env update --file requirements-all.yml
          make install

      - uses: actions/setup-node@v2
        with:
          node-version: 14.x

      - name: Install Workbench Dependencies
        working-directory: ./workbench
        run: |
          yarn config set network-timeout 600000 -g
          yarn install

      - name: run workbench tests
        working-directory: ./workbench
        env:
          CI: true
        run: yarn test
