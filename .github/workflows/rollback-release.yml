on:
  # this workflow will run any time any PR into main is closed
  pull_request:
    types:
      - closed
    branches:
      - main

defaults:
  runs-on: ubuntu-latest

env:
  VERSION: ${{ }}

jobs:

  # run this job if a PR from an autorelease branch into main was closed without merging
  if_autorelease_declined:
    if: startsWith(github.head_ref, 'autorelease') && github.event.pull_request.merged == false
    steps:
      - name: Delete the autorelease/$VERSION branch
        run: git push origin --delete autorelease/$VERSION

      - name: Delete the $VERSION Github release (if it exists)
        run: gh --repo $GITHUB_REPO release delete $VERSION --yes

      - name: Delete the $VERSION tag (if it exists)
        run: gh --repo $GITHUB_REPO release delete $VERSION --yes

  # run this job if a PR was merged from an autorelease branch into main
  if_autorelease_merged:
    if: startsWith(github.head_ref, 'autorelease') && github.event.pull_request.merged == true
    steps:

      - name: Install dependencies
        run: conda install gh twine

      - name: Download release artifacts
        run: |
          mkdir artifacts
          gh --repo $GITHUB_REPO run download $GH_RUN_ID \
            --dir artifacts \
            --name InVEST-Windows-binary.zip \
            --name InVEST-macOS-binary.zip \
            --name Workbench-Windows-binary.zip \
            --name Workbench-macOS-binary.zip \
            --name InVEST-sample-data.zip \
            --name InVEST-user-guide.zip \
            --name "Source distribution.zip" \
            --name "Wheel for *.zip"

      - name: Create release message
        run: |
          # Format the HISTORY of this release for the release.
          # This file represents both the title and the body of the
          # release.  A blank line separates the title from the body.

          echo "$VERSION" >> $RELEASE_MESSAGE_FILE
          echo "" >> $RELEASE_MESSAGE_FILE
          echo "This bugfix release includes the following fixes and features:" >> "$RELEASE_MESSAGE_FILE"
          echo "" >> $RELEASE_MESSAGE_FILE  # extra line to clarify we're starting a bulleted list.

          # Copy the history notes for this version into the release message
          # The tail +3 cuts off the version string and underline of the title.
          sed -n "/$VERSION/,/^$/p" HISTORY.rst | tail -n +3 >> $RELEASE_MESSAGE_FILE

      - name: Create Github release
        run: |
          gh release create $VERSION \
            --repo $GITHUB_REPO \
            --notes-file $RELEASE_MESSAGE_FILE \
            --verify-tag \
            artifacts/*

      - name: Create a PyPI release
        # this is the only step that can't be rolled back
        run: twine upload -r $PYPI_REPO artifacts/natcap.invest.*

      - name: Roll back on failure
        if: failure()
        run: |
          # Delete the autorelease/$VERSION branch
          git push origin --delete autorelease/$VERSION

          # Delete the $VERSION Github release (if it exists)
          gh --repo $GITHUB_REPO release delete $VERSION --yes

          # Delete the $VERSION tag (if it exists)
          # gh --repo $GITHUB_REPO release delete $VERSION --yes



