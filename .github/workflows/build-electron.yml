name: Build, Test Binaries, & Release

on: [push, pull_request]

defaults:
  run:
    shell: bash -l {0}

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        node-version: [14.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # fetch complete history

    - name: Fetch git tags
      run: git fetch origin +refs/tags/*:refs/tags/*

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      run: |
        yarn config set network-timeout 600000 -g
        yarn install --verbose

    - name: Fetch InVEST Binaries
      run: yarn run fetch-invest

    - name: Run the build script
      run: yarn run build

    # Steps that use github secrets do not run in pull requests.
    # These include codesigning & GCS deploy-related things.
    - name: Set up Python for gsutil
      # gsutil requires a python, which is not included on Windows
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Set up GCP
      # Secrets not available in PR so don't use GCP.
      if: github.event_name != 'pull_request'
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        version: '281.0.0'
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

    - name: Code-signing setup for macOS
      if: github.event_name != 'pull_request' && matrix.os == 'macos-latest'
      shell: bash
      env:
        P12_FILE_PATH: ~/Downloads/codesign_cert.p12
        KEYCHAIN_NAME: codesign_keychain
        KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        CERT_KEY_PASS: ${{ secrets.CODESIGN_CERT_KEY_PASS }}

      run: |
        gsutil cp gs://stanford_cert/20220510Expiry-macOSInstallerDistributionCert.p12 $P12_FILE_PATH

        bash ./scripts/setup_macos_keychain.sh 

        # these env variables tell electron-builder to do code signing
        echo "CSC_IDENTITY_AUTO_DISCOVERY=false" >> $GITHUB_ENV
        echo "CSC_LINK=$P12_FILE_PATH" >> $GITHUB_ENV
        echo "CSC_KEY_PASSWORD=${{ secrets.CODESIGN_CERT_KEY_PASS }}" >> $GITHUB_ENV

        # echo "CSC_KEYCHAIN=$KEYCHAIN_NAME" >> $GITHUB_ENV
        # echo "CSC_NAME='3rd Party Mac Developer Installer: Stanford University (CQRZ4E7K9U)'" >> $GITHUB_ENV

    - name: Code-signing setup for Windows
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      env:
        P12_FILE: 20220510Expiry-macOSInstallerDistributionCert.p12
        CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe
      run: |
        gsutil cp gs://stanford_cert/$P12_FILE ~/$P12_FILE

        # all these variables are used by electron-builder
        echo "CSC_LINK=~/$P12_FILE" >> $GITHUB_ENV
        echo "CSC_KEY_PASSWORD=${{ secrets.CODESIGN_CERT_KEY_PASS }}" >> $GITHUB_ENV
        echo "CSC_IDENTITY_AUTO_DISCOVERY=false" >> $GITHUB_ENV

    - name: Run electron-builder
      env:
        GH_TOKEN: env.GITHUB_TOKEN
        DEBUG: electron-builder
      run: yarn run dist

    - name: Test electron app with puppeteer
      run: yarn run test-electron-app

    - name: Upload app logging from puppeteer to github - MacOS
      uses: actions/upload-artifact@v2.2.4
      if: matrix.os == 'macos-latest' && always()
      with:
        name: 'macos_puppeteer_log.zip'
        path: '~/Library/Logs/invest-workbench/'

    - name: Upload app logging from puppeteer to github - Windows
      uses: actions/upload-artifact@v2.2.4
      if: matrix.os == 'windows-latest' && always()
      with:
        name: 'windows_puppeteer_log.zip'
        path: '~/AppData/Roaming/invest-workbench/logs/'

    - name: Upload installer artifacts to github
      uses: actions/upload-artifact@v2.2.4
      if: ${{ always() }}
      with:
        name: invest-workbench-${{ matrix.os }}
        path: dist/invest_*_workbench_*

    - name: Set variables for GCS deploy target
      if: github.event_name != 'pull_request'
      run: |
        echo "VERSION"=$(cat .workbench_version_string.env) >> $GITHUB_ENV
        echo "BUCKET=$([ ${{ github.repository_owner }} == 'natcap' ] \
          && echo 'gs://releases.naturalcapitalproject.org/invest-workbench' \
          || echo 'gs://natcap-dev-build-artifacts/invest-workbench/${{ github.repository_owner }}' \
          )" >> $GITHUB_ENV

    - name: Deploy artifacts to GCS - Windows
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      env:
        CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe
      run: |
        gsutil -m rsync dist/ "${{ env.BUCKET }}/${{ env.VERSION }}/"

    - name: Deploy artifacts to GCS - macOS
      if: github.event_name != 'pull_request' && matrix.os == 'macos-latest'
      run: |
        gsutil -m rsync dist/ "${{ env.BUCKET }}/${{ env.VERSION }}/"
