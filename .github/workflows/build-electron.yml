name: Build, Test Binaries, & Release

on: [push, pull_request]

defaults:
  run:
    shell: bash -l -x {0}

jobs:
  build-and-release:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
        node-version: [14.x]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        fetch-depth: 0  # fetch complete history

    - name: Fetch git tags
      run: git fetch origin +refs/tags/*:refs/tags/*

    - name: Install Node.js
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - name: Install Dependencies
      run: |
        yarn config set network-timeout 600000 -g
        yarn install --verbose

    - name: Fetch InVEST Binaries
      run: yarn run fetch-invest

    - name: Run the build script
      run: yarn run build

    # Steps that use github secrets do not run in pull requests.
    # These include codesigning & GCS deploy-related things.
    - name: Set up Python for gsutil
      # gsutil requires a python, which is not included on Windows
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Set up GCP
      # Secrets not available in PR so don't use GCP.
      if: github.event_name != 'pull_request'
      uses: google-github-actions/setup-gcloud@v0.2.0
      with:
        version: '281.0.0'
        service_account_key: ${{ secrets.GOOGLE_SERVICE_ACC_KEY }}

    - name: Run electron-builder
      env:
        GH_TOKEN: env.GITHUB_TOKEN
        DEBUG: electron-builder
        CSC_IDENTITY_AUTO_DISCOVERY: false  # disable electron-builder code signing
      run: yarn run dist

    - name: Code signing (MacOS)
      if: github.event_name != 'pull_request' && matrix.os == 'macos-latest'
      env:
        KEYCHAIN_NAME: codesign_keychain
        KEYCHAIN_PASS: ${{ secrets.MAC_KEYCHAIN_PASS }}
        CERT_PASS: ${{ secrets.MACOS_CODESIGN_CERT_PASS }}
        CERT_FILE: 2025-01-16-Expiry-AppStore-App.p12
        BIN_TO_SIGN: dist/invest_*.dmg
      run: |

        gsutil cp gs://stanford_cert/$CERT_FILE ~/$CERT_FILE
        ls ~/

        # create a new keychain (so that we can know what the password is)
        security create-keychain -p $KEYCHAIN_PASS $KEYCHAIN_NAME

        # add the keychain to the search list so it can be found
        security list-keychains -s $KEYCHAIN_NAME

        # unlock the keychain so we can import to it (stays unlocked 5 minutes by default)
        security unlock-keychain -p $KEYCHAIN_PASS $KEYCHAIN_NAME

        # add the certificate to the keychain
        # -T option says that the codesign executable can access the keychain
        # for some reason this alone is not enough, also need the following step
        security import ~/$CERT_FILE -k "$KEYCHAIN_NAME" -P "$CERT_PASS" -T /usr/bin/codesign

        # this is essential to avoid the UI password prompt
        security set-key-partition-list -S apple-tool:,apple: -s -k $KEYCHAIN_PASS $KEYCHAIN_NAME

        # sign the dmg using certificate that's looked up by unique identifier 'Stanford'
        codesign --timestamp --verbose --sign Stanford $BIN_TO_SIGN

        # relock the keychain (not sure if this is important?)
        security lock-keychain $KEYCHAIN_NAME

    - name: Code signing (Windows)
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      env:
        CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe
        CERT_FILE: Stanford-natcap-code-signing-cert-expires-2024-01-26.p12
        CERT_PASS: ${{ secrets.WINDOWS_CODESIGN_CERT_PASS }}
        BIN_TO_SIGN: dist\invest_*.exe
      run: |
        gsutil cp gs://stanford_cert/$CERT_FILE ~/$CERT_FILE

        # figure out the path to signtool.exe
        SIGNTOOL=$(find 'C:\\Program Files (x86)\\Windows Kits\\10' -type f -name 'signtool.exe*' | head -n 1)
        echo $SIGNTOOL
        echo "SIGNTOOL=$SIGNTOOL" >> $GITHUB_ENV

        "$SIGNTOOL" sign -fd SHA256 -f ~/$CERT_FILE -p $CERT_PASS $BIN_TO_SIGN
        "$SIGNTOOL" timestamp -tr http://timestamp.sectigo.com -td SHA256 $BIN_TO_SIGN

    # - name: Code signing part 2 (Windows)
    #   if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
    #   shell: pwsh
    #   env:
    #     CERT_PASS: ${{ secrets.WINDOWS_CODESIGN_CERT_PASS }}
    #     BIN_TO_SIGN: dist\invest_*.exe
    #     CERT_FILE: Stanford-natcap-code-signing-cert-expires-2024-01-26.p12
    #   run: |
    #     & "$SIGNTOOL" sign /fd SHA256 /f "$HOME\$CERT_FILE" /p "$CERT_PASS" $BIN_TO_SIGN
    #     & "$SIGNTOOL" timestamp /tr http://timestamp.sectigo.com /td SHA256 $BIN_TO_SIGN


    - name: Test electron app with puppeteer
      run: yarn run test-electron-app

    - name: Upload app logging from puppeteer to github - MacOS
      uses: actions/upload-artifact@v2.2.4
      if: matrix.os == 'macos-latest' && always()
      with:
        name: 'macos_puppeteer_log.zip'
        path: '~/Library/Logs/invest-workbench/'

    - name: Upload app logging from puppeteer to github - Windows
      uses: actions/upload-artifact@v2.2.4
      if: matrix.os == 'windows-latest' && always()
      with:
        name: 'windows_puppeteer_log.zip'
        path: '~/AppData/Roaming/invest-workbench/logs/'

    - name: Upload installer artifacts to github
      uses: actions/upload-artifact@v2.2.4
      if: ${{ always() }}
      with:
        name: invest-workbench-${{ matrix.os }}
        path: dist/invest_*_workbench_*

    - name: Set variables for GCS deploy target
      if: github.event_name != 'pull_request'
      run: |
        echo "VERSION"=$(cat .workbench_version_string.env) >> $GITHUB_ENV
        echo "BUCKET=$([ ${{ github.repository_owner }} == 'natcap' ] \
          && echo 'gs://releases.naturalcapitalproject.org/invest-workbench' \
          || echo 'gs://natcap-dev-build-artifacts/invest-workbench/${{ github.repository_owner }}' \
          )" >> $GITHUB_ENV

    - name: Deploy artifacts to GCS - Windows
      if: github.event_name != 'pull_request' && matrix.os == 'windows-latest'
      env:
        CLOUDSDK_PYTHON: ${{env.pythonLocation}}\python.exe
      run: |
        gsutil -m rsync dist/ "${{ env.BUCKET }}/${{ env.VERSION }}/"

    - name: Deploy artifacts to GCS - macOS
      if: github.event_name != 'pull_request' && matrix.os == 'macos-latest'
      run: |
        gsutil -m rsync dist/ "${{ env.BUCKET }}/${{ env.VERSION }}/"
