name: Release (Part 1 of 2)

on:
  workflow_dispatch:
    inputs:
      version:
        required: true
        type: string

env:
  VERSION: ${{ inputs.version }}
  AUTORELEASE_BRANCH: autorelease/${{ inputs.version }}
  PR_MESSAGE_FILE: pr_message.md
  GITHUB_TOKEN: ${{ github.token }}

permissions:
  contents: write  # allow this workflow to push changes to the repo
  pull-requests: write

jobs:
  finalize-and-tag:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies
        run: conda install gh --channel conda-forge

      - name: Configure git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
          git remote -v

      # Members of the natcap software team can push to the autorelease branch on
      # natcap/invest; this branch is a special case for our release process.
      - name: Create autorelease branch
        run: git checkout -b "$AUTORELEASE_BRANCH"

      # Replace
      #
      # Unreleased Changes
      # ------------------
      #
      # with
      #
      # ..
      #   Unreleased Changes
      #   ------------------
      #
      # X.X.X (XXXX-XX-XX)
      # ------------------
      - name: Update HISTORY.rst
        run: |
          HEADER="$VERSION ($(date '+%Y-%m-%d'))"
          HEADER_LENGTH=${#HEADER}
          UNDERLINE=$(for i in $(seq 1 $HEADER_LENGTH); do echo -n "-"; done)
          perl -0777 -i -pe \
              "s/Unreleased Changes\n------------------/..\n  Unreleased Changes\n  ------------------\n\n${HEADER}\n${UNDERLINE}/g" \
              HISTORY.rst
          git add HISTORY.rst
          git commit -m "Committing the $VERSION release."

      - name: Tag and push
        run: |
          git tag $VERSION
          git push origin $VERSION $AUTORELEASE_BRANCH

      - name: Create PR message
        run: |
          echo "
            Release $VERSION and merge into \`main\`

            # Release $VERSION

            This PR includes automated changes made for the $VERSION release.

            In addition to the actions workflow triggered by this PR,
            workflows will also be triggered for the $AUTORELEASE_BRANCH branch
            and the $VERSION tag.

            The $VERSION tag workflow is most important because it produces the
            artifacts that will be used in the next steps of the release process.
            If it fails for any reason, decline this PR and start over.
            Declining this PR will trigger a Github Action that will roll back any
            release steps that have completed so far.

            ## Intermittent failures
            If the $VERSION tag workflow fails due to an intermittent problem,
            decline this PR and start over. Declining this PR will trigger a
            Github Action that will roll back any release steps that have completed
            so far.

            If $VERSION tag workflow succeeds, but this PR workflow and/or the
            $AUTORELEASE_BRANCH branch workflow fail due to an intermittent problem,
            continue with the release. Approve and merge this PR with a comment
            explaining what happened.

            ## Bugs
            If the workflows reveal a bug in the tagged version, decline this PR.
            Declining this PR will trigger a Github Action that will roll back any
            release steps that have completed so far. Submit a fix in a separate PR
            into \`main\`. Once the fix has been merged, restart the release process
            from the beginning.

            ## If everything looks OK
            1. Approve and merge this PR. This will trigger a Github Action
               that will complete the release.
            2. Take a look at the Release Checklist
               (https://github.com/natcap/invest/wiki/Release-Checklist) and take care of
               anything else that needs to be taken care of.
          " > $PR_MESSAGE_FILE

      - name: Create a PR from the autorelease branch into main
        run: |
          git status
          git diff
          gh pr create \
            --base main \
            --head $AUTORELEASE_BRANCH \
            --title "$VERSION release" \
            --body-file $PR_MESSAGE_FILE \
            --reviewer $GITHUB_ACTOR \
            --assignee $GITHUB_ACTOR

      - name: Roll back on failure
        if: failure()
        uses: ./.github/actions/rollback_release
        with:
          VERSION: ${{ env.VERSION }}
          GITHUB_TOKEN: ${{ github.token }}
